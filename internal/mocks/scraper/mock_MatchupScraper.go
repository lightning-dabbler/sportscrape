// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package scraper

import (
	"github.com/lightning-dabbler/sportscrape"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMatchupScraper creates a new instance of MockMatchupScraper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatchupScraper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatchupScraper {
	mock := &MockMatchupScraper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMatchupScraper is an autogenerated mock type for the MatchupScraper type
type MockMatchupScraper struct {
	mock.Mock
}

type MockMatchupScraper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatchupScraper) EXPECT() *MockMatchupScraper_Expecter {
	return &MockMatchupScraper_Expecter{mock: &_m.Mock}
}

// Feed provides a mock function for the type MockMatchupScraper
func (_mock *MockMatchupScraper) Feed() sportscrape.Feed {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Feed")
	}

	var r0 sportscrape.Feed
	if returnFunc, ok := ret.Get(0).(func() sportscrape.Feed); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(sportscrape.Feed)
	}
	return r0
}

// MockMatchupScraper_Feed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Feed'
type MockMatchupScraper_Feed_Call struct {
	*mock.Call
}

// Feed is a helper method to define mock.On call
func (_e *MockMatchupScraper_Expecter) Feed() *MockMatchupScraper_Feed_Call {
	return &MockMatchupScraper_Feed_Call{Call: _e.mock.On("Feed")}
}

func (_c *MockMatchupScraper_Feed_Call) Run(run func()) *MockMatchupScraper_Feed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchupScraper_Feed_Call) Return(feed sportscrape.Feed) *MockMatchupScraper_Feed_Call {
	_c.Call.Return(feed)
	return _c
}

func (_c *MockMatchupScraper_Feed_Call) RunAndReturn(run func() sportscrape.Feed) *MockMatchupScraper_Feed_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockMatchupScraper
func (_mock *MockMatchupScraper) Init() {
	_mock.Called()
	return
}

// MockMatchupScraper_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockMatchupScraper_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockMatchupScraper_Expecter) Init() *MockMatchupScraper_Init_Call {
	return &MockMatchupScraper_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockMatchupScraper_Init_Call) Run(run func()) *MockMatchupScraper_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchupScraper_Init_Call) Return() *MockMatchupScraper_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMatchupScraper_Init_Call) RunAndReturn(run func()) *MockMatchupScraper_Init_Call {
	_c.Run(run)
	return _c
}

// Provider provides a mock function for the type MockMatchupScraper
func (_mock *MockMatchupScraper) Provider() sportscrape.Provider {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Provider")
	}

	var r0 sportscrape.Provider
	if returnFunc, ok := ret.Get(0).(func() sportscrape.Provider); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(sportscrape.Provider)
	}
	return r0
}

// MockMatchupScraper_Provider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Provider'
type MockMatchupScraper_Provider_Call struct {
	*mock.Call
}

// Provider is a helper method to define mock.On call
func (_e *MockMatchupScraper_Expecter) Provider() *MockMatchupScraper_Provider_Call {
	return &MockMatchupScraper_Provider_Call{Call: _e.mock.On("Provider")}
}

func (_c *MockMatchupScraper_Provider_Call) Run(run func()) *MockMatchupScraper_Provider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchupScraper_Provider_Call) Return(provider sportscrape.Provider) *MockMatchupScraper_Provider_Call {
	_c.Call.Return(provider)
	return _c
}

func (_c *MockMatchupScraper_Provider_Call) RunAndReturn(run func() sportscrape.Provider) *MockMatchupScraper_Provider_Call {
	_c.Call.Return(run)
	return _c
}

// Scrape provides a mock function for the type MockMatchupScraper
func (_mock *MockMatchupScraper) Scrape() sportscrape.MatchupOutput {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scrape")
	}

	var r0 sportscrape.MatchupOutput
	if returnFunc, ok := ret.Get(0).(func() sportscrape.MatchupOutput); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(sportscrape.MatchupOutput)
	}
	return r0
}

// MockMatchupScraper_Scrape_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scrape'
type MockMatchupScraper_Scrape_Call struct {
	*mock.Call
}

// Scrape is a helper method to define mock.On call
func (_e *MockMatchupScraper_Expecter) Scrape() *MockMatchupScraper_Scrape_Call {
	return &MockMatchupScraper_Scrape_Call{Call: _e.mock.On("Scrape")}
}

func (_c *MockMatchupScraper_Scrape_Call) Run(run func()) *MockMatchupScraper_Scrape_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchupScraper_Scrape_Call) Return(matchupOutput sportscrape.MatchupOutput) *MockMatchupScraper_Scrape_Call {
	_c.Call.Return(matchupOutput)
	return _c
}

func (_c *MockMatchupScraper_Scrape_Call) RunAndReturn(run func() sportscrape.MatchupOutput) *MockMatchupScraper_Scrape_Call {
	_c.Call.Return(run)
	return _c
}
