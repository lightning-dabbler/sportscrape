// Code generated by mockery. DO NOT EDIT.

package mocksportscrape

import (
	sportscrape "github.com/lightning-dabbler/sportscrape"
	mock "github.com/stretchr/testify/mock"
)

// MockEventDataScraper is an autogenerated mock type for the EventDataScraper type
type MockEventDataScraper struct {
	mock.Mock
}

type MockEventDataScraper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventDataScraper) EXPECT() *MockEventDataScraper_Expecter {
	return &MockEventDataScraper_Expecter{mock: &_m.Mock}
}

// Feed provides a mock function with no fields
func (_m *MockEventDataScraper) Feed() sportscrape.Feed {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Feed")
	}

	var r0 sportscrape.Feed
	if rf, ok := ret.Get(0).(func() sportscrape.Feed); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sportscrape.Feed)
	}

	return r0
}

// MockEventDataScraper_Feed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Feed'
type MockEventDataScraper_Feed_Call struct {
	*mock.Call
}

// Feed is a helper method to define mock.On call
func (_e *MockEventDataScraper_Expecter) Feed() *MockEventDataScraper_Feed_Call {
	return &MockEventDataScraper_Feed_Call{Call: _e.mock.On("Feed")}
}

func (_c *MockEventDataScraper_Feed_Call) Run(run func()) *MockEventDataScraper_Feed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventDataScraper_Feed_Call) Return(_a0 sportscrape.Feed) *MockEventDataScraper_Feed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDataScraper_Feed_Call) RunAndReturn(run func() sportscrape.Feed) *MockEventDataScraper_Feed_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with no fields
func (_m *MockEventDataScraper) Init() {
	_m.Called()
}

// MockEventDataScraper_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockEventDataScraper_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockEventDataScraper_Expecter) Init() *MockEventDataScraper_Init_Call {
	return &MockEventDataScraper_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockEventDataScraper_Init_Call) Run(run func()) *MockEventDataScraper_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventDataScraper_Init_Call) Return() *MockEventDataScraper_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventDataScraper_Init_Call) RunAndReturn(run func()) *MockEventDataScraper_Init_Call {
	_c.Run(run)
	return _c
}

// Provider provides a mock function with no fields
func (_m *MockEventDataScraper) Provider() sportscrape.Provider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Provider")
	}

	var r0 sportscrape.Provider
	if rf, ok := ret.Get(0).(func() sportscrape.Provider); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sportscrape.Provider)
	}

	return r0
}

// MockEventDataScraper_Provider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Provider'
type MockEventDataScraper_Provider_Call struct {
	*mock.Call
}

// Provider is a helper method to define mock.On call
func (_e *MockEventDataScraper_Expecter) Provider() *MockEventDataScraper_Provider_Call {
	return &MockEventDataScraper_Provider_Call{Call: _e.mock.On("Provider")}
}

func (_c *MockEventDataScraper_Provider_Call) Run(run func()) *MockEventDataScraper_Provider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventDataScraper_Provider_Call) Return(_a0 sportscrape.Provider) *MockEventDataScraper_Provider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDataScraper_Provider_Call) RunAndReturn(run func() sportscrape.Provider) *MockEventDataScraper_Provider_Call {
	_c.Call.Return(run)
	return _c
}

// Scrape provides a mock function with given fields: matchup
func (_m *MockEventDataScraper) Scrape(matchup interface{}) sportscrape.EventDataOutput {
	ret := _m.Called(matchup)

	if len(ret) == 0 {
		panic("no return value specified for Scrape")
	}

	var r0 sportscrape.EventDataOutput
	if rf, ok := ret.Get(0).(func(interface{}) sportscrape.EventDataOutput); ok {
		r0 = rf(matchup)
	} else {
		r0 = ret.Get(0).(sportscrape.EventDataOutput)
	}

	return r0
}

// MockEventDataScraper_Scrape_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scrape'
type MockEventDataScraper_Scrape_Call struct {
	*mock.Call
}

// Scrape is a helper method to define mock.On call
//   - matchup interface{}
func (_e *MockEventDataScraper_Expecter) Scrape(matchup interface{}) *MockEventDataScraper_Scrape_Call {
	return &MockEventDataScraper_Scrape_Call{Call: _e.mock.On("Scrape", matchup)}
}

func (_c *MockEventDataScraper_Scrape_Call) Run(run func(matchup interface{})) *MockEventDataScraper_Scrape_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockEventDataScraper_Scrape_Call) Return(_a0 sportscrape.EventDataOutput) *MockEventDataScraper_Scrape_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventDataScraper_Scrape_Call) RunAndReturn(run func(interface{}) sportscrape.EventDataOutput) *MockEventDataScraper_Scrape_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventDataScraper creates a new instance of MockEventDataScraper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventDataScraper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventDataScraper {
	mock := &MockEventDataScraper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
